<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.green.shop.item.mapper.ItemMapper"> <!--Mapper 인터페이스와 연결-->

<!--    <resultMap id="itemDtoMap" type="itemDto">
        <id property="itemId" column="item_id"/>
        <result property="itemName" column="item_name"/>
        <result property="stockNumber" column="stock_number"/>
        <result property="itemDetail" column="item_detail"/>
        <result property="itemSellStatus" column="item_sell_status"/>
        <result property="regTime" column="reg_time"/>
        <result property="updateTime" column="update_time"/>

    </resultMap>-->



    <!-- 상품 추가 (useGeneratedKeys:자동, dto의 이름 keyProperty,자동생성되는 DB열의이름:itemId) -->
    <insert id="itemInsert" parameterType="itemDto" useGeneratedKeys="true" keyProperty="itemId" keyColumn="itemId">
        INSERT INTO item(item_name, price, stock_number, item_detail, item_sell_status)
        VALUES(#{itemName}, #{price}, #{stockNumber}, #{itemDetail}, #{itemSellStatus})
    </insert>

    <!-- 상품 이미지추가 -->
    <insert id="itemImgInsert" parameterType="itemImgDto" useGeneratedKeys="true" keyProperty="itemId" keyColumn="itemImgId">
        INSERT INTO item_Img(img_name, ori_img_name, img_url, rep_img_yn, item_id)
        VALUES(#{imgName}, #{oriImgName}, #{imgUrl}, #{repImgYn}, #{itemId})
    </insert>

    <!-- 전체 목록 조회 (itemListAll) -->
    <select id="itemListAll" resultType="itemDto">
        SELECT item_id, item_name, price, stock_number, item_detail, item_sell_status, reg_time, update_time
        FROM item
    </select>

    <!--상품 검색하기-->
    <select id="itemSelect" resultType="itemDto">
        SELECT item_id, item_name, price, stock_number, item_detail, item_sell_status, reg_time, update_time
        FROM item
        WHERE item_id=#{itemId}
    </select>

    <!--상품번호에 맞는 이미지 검색-->
    <select id="itemImgSelect" resultType="itemImgDto">
        SELECT item_img_id, img_name, ori_img_name, img_url, rep_img_yn, item_id, reg_time, update_time
        FROM item_img
        WHERE item_id = #{itemId}
        ORDER BY item_img_id
    </select>

    <!-- 이미지 변경을 위해 이미지 번호에 맞는 이미지를 검색 -->
    <select id="itemImgIdSelect" resultType="itemImgDto">
        SELECT item_img_id, img_name, ori_img_name, img_url, rep_img_yn, item_id, reg_time, update_time
        FROM item_img
        WHERE item_img_id = #{itemImgId}
        ORDER BY item_img_id
    </select>


    <!-- 상품 변경하기 -->
    <update id="itemUpdate" parameterType="itemDto">
        UPDATE item
        SET item_name=#{itemName}, price=#{price}, stock_Number=#{stockNumber},
            item_detail=#{itemDetail}, item_sell_status=#{itemSellStatus}, update_time=#{updateTime}
        WHERE item_id = #{itemId}
    </update>

    <!-- 상품 이미지 변경하기 -->
    <update id="itemImgUpdate" parameterType="itemImgDto">
        UPDATE item_img
        SET img_name=#{imgName}, ori_img_name=#{oriImgName}, img_url=#{imgUrl},
            rep_img_yn=#{repImgYn}, item_id=#{itemId}
        WHERE item_img_id=#{itemImgId}
    </update>


    <sql id="itemSearchConditions">
        <if test="itemSearchDto.searchDateType != null and itemSearchDto.searchDateType != ''">
        <if test="itemSearchDto.searchDateType.equals('1d')">
            AND reg_time &gt; DATE_SUB(NOW(), INTERVAL 1 DAY)
        </if>
        <if test="itemSearchDto.searchDateType.equals('1w')">
            AND reg_time &gt; DATE_SUB(NOW(), INTERVAL 1 WEEK)
        </if>
        <if test="itemSearchDto.searchDateType.equals('1m')">
            AND reg_time &gt; DATE_SUB(NOW(), INTERVAL 1 MONTH)
        </if>
        <if test="itemSearchDto.searchDateType.equals('6m')">
            AND reg_time &gt; DATE_SUB(NOW(), INTERVAL 6 MONTH)
        </if>
    </if>

        <if test="itemSearchDto.searchSellStatus != null">
            AND item_sell_status = #{itemSearchDto.searchSellStatus}
        </if>
        <if test="itemSearchDto.searchBy != null and itemSearchDto.searchText != ''">
            <choose>
                <when test="(itemSearchDto.searchBy).equals('itemName')">
                    AND item_name LIKE CONCAT('%', #{itemSearchDto.searchText}, '%')
                </when>
                <when test="(itemSearchDto.searchBy).equals('itemDetail')">
                    AND item_detail LIKE CONCAT('%', #{itemSearchDto.searchText}, '%')
                </when>
            </choose>
        </if>


    </sql>




    <!-- 전체 목록(페이징 처리)-->
    <select id="itemListPage" parameterType="map" resultType="itemDto">
        SELECT item_id, item_name, price, stock_number, item_detail,
                item_sell_status, reg_time, update_time
        FROM item
        <where>
            <include refid="itemSearchConditions" />
        </where>
        ORDER BY item_id
        LIMIT #{pageSize} OFFSET #{page}
    </select>

    <!-- 페이징 처리를 위한 전체 게시글 개수 세기 -->
    <select id="countAdminItems" resultType="int">
        SELECT COUNT(*) FROM item
        <where>
            <include refid="itemSearchConditions" />
        </where>
    </select>


    <!-- 메인페이지에서 출력할 sql문 -->
    <select id="mainSelect" parameterType="map" resultType="itemMainDto">
        SELECT i.item_id, i.item_name, i.item_detail, im.img_url, i.price
        FROM item i JOIN item_img im
            ON i.item_id=im.item_id
        WHERE im.rep_img_yn='Y'
            <include refid="itemSearchConditions" />
        ORDER BY i.item_id DESC
        LIMIT #{pageSize} OFFSET #{page}
    </select>








</mapper>